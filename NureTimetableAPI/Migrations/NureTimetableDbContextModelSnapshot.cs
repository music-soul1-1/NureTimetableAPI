// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NureTimetableAPI.Contexts;

#nullable disable

namespace NureTimetableAPI.Migrations
{
    [DbContext(typeof(NureTimetableDbContext))]
    partial class NureTimetableDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuditoryDomainAuditoryTypeDomain", b =>
                {
                    b.Property<Guid>("AuditoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditoryTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuditoriesId", "AuditoryTypesId");

                    b.HasIndex("AuditoryTypesId");

                    b.ToTable("AuditoryDomainAuditoryTypeDomain");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.AuditoryDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuildingDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("HasPower")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingDomainId");

                    b.ToTable("Auditories");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.AuditoryTypeDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditoryTypes");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.BuildingDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DepartmentDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeachersFacultyDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeachersFacultyDomainId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DirectionDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupsFacultyDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupsFacultyDomainId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.GroupsFacultyDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupsFaculty");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.TeachersFacultyDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeachersFaculties");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DirectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DirectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("AuditoryDomainAuditoryTypeDomain", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.AuditoryDomain", null)
                        .WithMany()
                        .HasForeignKey("AuditoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NureTimetableAPI.Models.Domain.AuditoryTypeDomain", null)
                        .WithMany()
                        .HasForeignKey("AuditoryTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.AuditoryDomain", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.BuildingDomain", null)
                        .WithMany("Auditories")
                        .HasForeignKey("BuildingDomainId");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DepartmentDomain", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.TeachersFacultyDomain", "TeachersFaculty")
                        .WithMany("Departments")
                        .HasForeignKey("TeachersFacultyDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeachersFaculty");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DirectionDomain", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.GroupsFacultyDomain", "GroupsFaculty")
                        .WithMany("Directions")
                        .HasForeignKey("GroupsFacultyDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupsFaculty");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Group", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.DirectionDomain", "Direction")
                        .WithMany("Groups")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NureTimetableAPI.Models.Specialty", null)
                        .WithMany("Groups")
                        .HasForeignKey("SpecialtyId");

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Specialty", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.DirectionDomain", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Teacher", b =>
                {
                    b.HasOne("NureTimetableAPI.Models.Domain.DepartmentDomain", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.BuildingDomain", b =>
                {
                    b.Navigation("Auditories");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DepartmentDomain", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.DirectionDomain", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.GroupsFacultyDomain", b =>
                {
                    b.Navigation("Directions");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Domain.TeachersFacultyDomain", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("NureTimetableAPI.Models.Specialty", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
